{"status":{},"contains_secrets":false,"product_version":"3.1.1","spec":{"description":"","resources":{"client_attrs":{"None":{"y":299,"x":510},"25408ce9-0ae7-9097-22ae-6e32e7bde0c1":{"y":-64.8200531006,"x":620.2518920898},"9ec9fc5a-edee-42b1-8c6e-f6e1fc1be39e":{"y":-326.5000385622,"x":-294.1506618208},"69be0c69-a1c0-e380-fdbd-ab05306343ba":{"y":-66.1481781006,"x":125.0409545898},"f6be2786_deployment":{"y":-16511.9503590855,"x":-41388.9142253583}},"service_definition_list":[{"singleton":false,"action_list":[{"description":"System action for creating an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"DB_Provision"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"6fba9cbb_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"01945104_runbook","main_task_local_reference":{"kind":"app_task","name":"6fba9cbb_dag"},"variable_list":[]},"name":"action_create"},{"description":"System action for deleting an application. Deletes created VMs as well","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"DB_Provision"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"8bee20f0_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"fe42eb38_runbook","main_task_local_reference":{"kind":"app_task","name":"8bee20f0_dag"},"variable_list":[]},"name":"action_delete"},{"description":"System action for restarting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"DB_Provision"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"04cc6e24_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"ffd25064_runbook","main_task_local_reference":{"kind":"app_task","name":"04cc6e24_dag"},"variable_list":[]},"name":"action_restart"},{"description":"System action for starting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"DB_Provision"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"9d7e4dfb_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"ef6acd35_runbook","main_task_local_reference":{"kind":"app_task","name":"9d7e4dfb_dag"},"variable_list":[]},"name":"action_start"},{"description":"System action for stopping an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"DB_Provision"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"897e9b24_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"b81e8f8b_runbook","main_task_local_reference":{"kind":"app_task","name":"897e9b24_dag"},"variable_list":[]},"name":"action_stop"}],"depends_on_list":[],"name":"DB_Provision","port_list":[],"tier":"","variable_list":[{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"REFRESH_OPERATION_ID","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"VALIDATED_SNAP_ID","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}],"description":""}],"substrate_definition_list":[{"description":"","action_list":[{"description":"","type":"fragment","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_substrate","name":"Era_Provisioned_DB"},"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"Era_Get_SLA_Info"},{"kind":"app_task","name":"DefineProfiles"},{"kind":"app_task","name":"DefineDBServerID"},{"kind":"app_task","name":"ProvisionDB"},{"kind":"app_task","name":"MonitorDBCreate"},{"kind":"app_task","name":"GetDBid"}],"name":"7915bb58_dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"Era_Get_SLA_Info"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"DefineProfiles"}},{"from_task_reference":{"kind":"app_task","name":"DefineProfiles"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"DefineDBServerID"}},{"from_task_reference":{"kind":"app_task","name":"DefineDBServerID"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"ProvisionDB"}},{"from_task_reference":{"kind":"app_task","name":"ProvisionDB"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"MonitorDBCreate"}},{"from_task_reference":{"kind":"app_task","name":"MonitorDBCreate"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"GetDBid"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_substrate","name":"Era_Provisioned_DB"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Era_Get_SLA_Info","attrs":{"exit_status":[],"script":"# Set creds and headers\nera_user = '@@{era_creds.username}@@'\nera_pass = '@@{era_creds.secret}@@'\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\n\n# Get SLA_ID by doing a GET on the Database\nurl  = \"https:\/\/@@{era_ip}@@:8443\/era\/v0.9\/slas\/name\/@@{New_DB_SLA}@@\"\nresp = urlreq(url, verb='GET', auth='BASIC', user=era_user, passwd=era_pass, headers=headers)\n\n# If the response is ok, set our SLA_ID variable\nif resp.ok:\n  print \"SLA_ID={0}\".format(json.loads(resp.content)['id'])\n\n# If it is not, make a new call to get list of possible SLAs\nelse:\n  print \"Error: SLA Named '@@{New_DB_SLA}@@' was not found.\"\n  print \"\"\n  print \"The valid SLA values on this Era server are:\"\n  print \"======================================================\"\n  \n  url  = \"https:\/\/@@{era_ip}@@:8443\/era\/v0.9\/slas\"\n  resp = urlreq(url, verb='GET', auth='BASIC', user=era_user, passwd=era_pass, headers=headers)\n  \n  for slas in json.loads(resp.content):\n    print slas['name']\n  \n  print \"======================================================\"\n  print \"Please use one of the above SLAs, and try again.\"\n  exit(1)","eval_variables":["SLA_ID"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_substrate","name":"Era_Provisioned_DB"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"DefineProfiles","attrs":{"exit_status":[],"script":"# Set creds and headers\nera_user = '@@{era_creds.username}@@'\nera_pass = '@@{era_creds.secret}@@'\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\n\n#Set Parameter Profile ID's using default info.  No checking or logic in this version\n\nurl = \"https:\/\/@@{era_ip}@@:8443\/era\/v0.9\/profiles?name=@@{DB_Parameter_Profile}@@&type=Database_Parameter\"\nresp = urlreq(url, verb='GET', auth='BASIC', user=era_user, passwd=era_pass, headers=headers)\nprint \"DB_PARAMETER_PROFILE_ID={0}\".format(json.loads(resp.content)['id'])\n\nurl = \"https:\/\/@@{era_ip}@@:8443\/era\/v0.9\/profiles?name=@@{Network_Profile}@@&type=Network\"\nresp = urlreq(url, verb='GET', auth='BASIC', user=era_user, passwd=era_pass, headers=headers)\nprint \"NETWORK_PROFILE_ID={0}\".format(json.loads(resp.content)['id'])\n\nurl = \"https:\/\/@@{era_ip}@@:8443\/era\/v0.9\/profiles?name=@@{Software_Profile}@@&type=Software\"\nresp = urlreq(url, verb='GET', auth='BASIC', user=era_user, passwd=era_pass, headers=headers)\nprint \"SOFTWARE_PROFILE_ID={0}\".format(json.loads(resp.content)['id'])\n\n\nurl = \"https:\/\/@@{era_ip}@@:8443\/era\/v0.9\/profiles?name=@@{Compute_Profile}@@&type=Compute\"\nresp = urlreq(url, verb='GET', auth='BASIC', user=era_user, passwd=era_pass, headers=headers)\nprint \"COMPUTE_PROFILE_ID={0}\".format(json.loads(resp.content)['id'])\n\n#url = \"https:\/\/@@{era_ip}@@:8443\/era\/v0.9\/clusters\"\n#resp = urlreq(url, verb='GET', auth='BASIC', user=era_user, passwd=era_pass, headers=headers)\n#print \"CLUSTER_ID={0}\".format(json.loads(resp.content)['id'])\n\n# Use below logic to pull info for DB Parameter, Software, Compute and Network Profiles in next version\n# Get Database Parameter Profile - Using default for now can add logic to variables if multiple are desired\n#url = \"https:\/\/@@{era_ip}@@:8443\/era\/v0.9\/profiles?name=@@{DB_Parameter_Profile}@@&type=Database_Parameter\"\n#resp = urlreq(url, verb='GET', auth='BASIC', user=era_user, passwd=era_pass, headers=headers)\n\n# If the resonse is ok, set our DB_PARAM_PROFILE_ID\n#if resp.ok:\n#  print \"DB_PARAMETER_PROFILE_ID={0}\".format(json.loads(resp.content)['id'])\n  \n# If not, make a new call to get list of all possible profiles\n#else:\n#  print \"Error: Profile Named '@@{DB_Parameter_Profile}@@' was not found.\"\n#  print \"\"\n#  print \"The valid Profile values on this Era server are:\"\n#  print \"======================================================\"\n#  \n#  url  = \"https:\/\/@@{era_ip}@@:8443\/era\/v0.9\/profiles?type=Database_Parameter\"\n#  resp = urlreq(url, verb='GET', auth='BASIC', user=era_user, passwd=era_pass, headers=headers)\n#  \n#  for profiles in json.loads(resp.content):\n#    print profiles['name']\n  \n#  print \"======================================================\"\n#  print \"Please use one of the above Profiles, and try again.\"\n#  exit(1)","eval_variables":["DB_PARAMETER_PROFILE_ID","SOFTWARE_PROFILE_ID","NETWORK_PROFILE_ID","COMPUTE_PROFILE_ID","CLUSTER_ID"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_substrate","name":"Era_Provisioned_DB"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"DefineDBServerID","attrs":{"exit_status":[],"script":"# Set creds and headers\nera_user = '@@{era_creds.username}@@'\nera_pass = '@@{era_creds.secret}@@'\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\n\n# Get Database Server Info\n#url = \"https:\/\/@@{era_ip}@@:8443\/era\/v0.9\/dbservers?value-type=name&value=MSSQL@@{New_DB_Environment}@@?load-dbserver-cluster=false&load-databases=false&load-clones=false&detailed=false&load-metrics=false\"\nurl = \"https:\/\/@@{era_ip}@@:8443\/era\/v0.8\/dbservers\/name\/MSSQL@@{New_DB_Environment}@@?detailed=true\"\nresp = urlreq(url, verb='GET', auth='BASIC', user=era_user, passwd=era_pass, headers=headers)\n\n# If the resonse is ok, set our DB_SERVER_ID and DB_SERVER_IP variables\nif resp.ok:\n#  print \"DB_SERVER_ID={0}\".format(json.loads(resp.content)[0]['id'])\n#  print \"DB_SERVER_IPRAW={0}\".format(json.loads(resp.content)[0]['ipAddresses'])\n  print \"DB_SERVER_ID={0}\".format(json.loads(resp.content)['id'])\n  print \"DB_SERVER_IP={0}\".format(json.loads(resp.content)['ip'])\n \n  \n# If it is not, make a new call to get list of possible DB Server VMs\nelse:\n  print \"Error: Server Named 'MSSQL@@{New_DB_Environment}@@' was not found.\"\n  print \"\"\n  print \"The valid Server Names on this Era server are:\"\n  print \"======================================================\"\n  \n  url  = \"https:\/\/@@{era_ip}@@:8443\/era\/v0.9\/dbservers\"\n  resp = urlreq(url, verb='GET', auth='BASIC', user=era_user, passwd=era_pass, headers=headers)\n    \n  for dbservers in json.loads(resp.content):\n    print dbservers['name']\n  \n  print \"======================================================\"\n  print \"Please use one of the above MSSQL Servers, and try again.\"\n  exit(1)","eval_variables":["DB_SERVER_ID","DB_SERVER_IP"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_substrate","name":"Era_Provisioned_DB"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"ProvisionDB","attrs":{"exit_status":[],"script":"# Set creds and headers\nera_user = '@@{era_creds.username}@@'\nera_pass = '@@{era_creds.secret}@@'\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\n\n# Set the URL and payload\nurl     = \"https:\/\/@@{era_ip}@@:8443\/era\/v0.9\/databases\/provision\"\npayload = {\n  \"databaseType\": \"@@{New_DB_Type}@@_database\",\n  \"createDbserver\": \"false\",\n  \"name\": \"@@{New_DB_Name}@@\",\n  \"databaseDescription\": \"\",\n  \"dbParameterProfileId\": \"@@{DB_PARAMETER_PROFILE_ID}@@\",\n  \"newDbServerTimeZone\": \"Eastern Standard Time\",\n  \"timeMachineInfo\": {\n    \"name\": \"@@{New_DB_Name}@@_TM\",\n    \"description\": \"\",\n    \"slaId\": \"@@{SLA_ID}@@\",\n    \"schedule\": {\n      \"snapshotTimeOfDay\": {\n        \"hours\": 1,\n        \"minutes\": 0,\n        \"seconds\": 0\n      },\n      \"continuousSchedule\": {\n        \"enabled\": \"true\",\n        \"logBackupInterval\": 30,\n        \"snapshotsPerDay\": 1\n      },\n      \"weeklySchedule\": {\n        \"enabled\": \"true\",\n        \"dayOfWeek\": \"WEDNESDAY\"\n      },\n      \"monthlySchedule\": {\n        \"enabled\": \"true\",\n        \"dayOfMonth\": \"16\"\n      },\n      \"quartelySchedule\": {\n        \"enabled\": \"true\",\n        \"startMonth\": \"JANUARY\",\n        \"dayOfMonth\": \"16\"\n      },\n      \"yearlySchedule\": {\n        \"enabled\": \"false\",\n        \"dayOfMonth\": 31,\n        \"month\": \"DECEMBER\"\n      }\n    },\n    \"tags\": [],\n    \"autoTuneLogDrive\": \"true\"\n  },\n  \"actionArguments\": [\n    {\n      \"name\": \"database_size\",\n      \"value\": @@{New_DB_Size}@@\n    },\n    {\n      \"name\": \"working_dir\",\n      \"value\": \"C:\\\\temp\"\n    },\n    {\n      \"name\": \"sql_user_name\",\n      \"value\": \"sa\"\n    },\n    {\n      \"name\": \"authentication_mode\",\n      \"value\": \"windows\"\n    },\n    {\n      \"name\": \"delete_vm_on_failure\",\n      \"value\": \"false\"\n    },\n    {\n      \"name\": \"auto_tune_staging_drive\",\n      \"value\": \"true\"\n    },\n    {\n      \"name\": \"host_ip\",\n      \"value\": \"@@{DB_SERVER_IP}@@\"\n    },\n    {\n      \"name\": \"database_collation\",\n      \"value\": \"SQL_Latin1_General_CP1_CI_AS\"\n    }\n  ],\n  \"dbserverId\": \"@@{DB_SERVER_ID}@@\",\n  \"clustered\": \"false\",\n  \"nodes\": [\n    {\n      \"properties\": [],\n      \"dbserverId\": \"@@{DB_SERVER_ID}@@\"\n    }\n  ],\n  \"autoTuneStagingDrive\": \"false\"\n}\n\n# Make the call and set the response operation ID to the variable\nresp = urlreq(url, verb='POST', auth='BASIC', user=era_user, passwd=era_pass, params=json.dumps(payload), headers=headers)\nif resp.ok:\n  print \"CREATE_OPERATION_ID={0}\".format(json.loads(resp.content)['operationId'])\nelse:\n  print \"Create Database request failed\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)","eval_variables":["CREATE_OPERATION_ID"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_substrate","name":"Era_Provisioned_DB"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"MonitorDBCreate","attrs":{"exit_status":[],"script":"# Set creds, headers, and URL\nera_user = '@@{era_creds.username}@@'\nera_pass = '@@{era_creds.secret}@@'\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\nurl     = \"https:\/\/@@{era_ip}@@:8443\/era\/v0.9\/operations\/@@{CREATE_OPERATION_ID}@@\"\n\n# Monitor the operation\nfor x in range(20):\n  \n  print \"Sleeping for 60 seconds.\"\n  sleep(60)\n  resp = urlreq(url, verb='GET', auth='BASIC', user=era_user, passwd=era_pass, headers=headers)\n  print \"Percentage Complete: {0}\".format(json.loads(resp.content)['percentageComplete'])\n  \n  # If complete, break out of loop\n  if json.loads(resp.content)['percentageComplete'] == \"100\":\n    break\n\n# If the operation did not complete within 20 minutes, assume it's not successful and error out\nif json.loads(resp.content)['percentageComplete'] != \"100\":\n  print \"Get Operation ID timed out\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)\n\n# Get the newly provision DB Entity Name and set it to a variable\nprint \"DB_ENTITY_NAME={0}\".format(json.loads(resp.content)['entityName'])","eval_variables":["DB_ENTITY_NAME"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_substrate","name":"Era_Provisioned_DB"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"GetDBid","attrs":{"exit_status":[],"script":"# Set creds and headers\nera_user = '@@{era_creds.username}@@'\nera_pass = '@@{era_creds.secret}@@'\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\n\n# Get DB Server IP and ID\nurl     = \"https:\/\/@@{era_ip}@@:8443\/era\/v0.9\/databases?value-type=name&value=@@{New_DB_Name}@@&detailed=true\"\nresp = urlreq(url, verb='GET', auth='BASIC', user=era_user, passwd=era_pass, headers=headers)\nif resp.ok:\n  print \"NEW_DB_ID={0}\".format(json.loads(resp.content)[0]['id'])\n  \nelse:\n  print \"Get DB info request failed\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)","eval_variables":["NEW_DB_ID"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]}],"description":"","name":"a19beb07_runbook","main_task_local_reference":{"kind":"app_task","name":"7915bb58_dag"},"variable_list":[]},"name":"pre_action_create"},{"description":"","type":"fragment","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_substrate","name":"Era_Provisioned_DB"},"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"cleanupDB"}],"name":"2be702b8_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_substrate","name":"Era_Provisioned_DB"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"cleanupDB","attrs":{"expected_response_params":[{"status":"SUCCESS","code":200,"type":""}],"request_body":"{\n  \"delete\": \"true\",\n  \"remove\": \"false\",\n  \"softRemove\": \"false\",\n  \"forced\": \"false\",\n  \"deleteTimeMachine\": \"true\",\n  \"deleteLogicalCluster\": \"true\"\n}\n","headers":[],"url":"https:\/\/@@{era_ip}@@:8443\/era\/v0.9\/databases\/@@{NEW_DB_ID}@@","response_paths":{"OperationID":"$['operationId']"},"retry_interval":1,"method":"DELETE","retry_count":1,"authentication":{"type":"basic_with_cred","credential_local_reference":{"kind":"app_credential","name":"era_creds"}},"tls_verify":false,"content_type":"application\/json","connection_timeout":120,"type":"","proxy_type":""},"timeout_secs":"0","type":"HTTP","variable_list":[]}],"description":"","name":"5134969e_runbook","main_task_local_reference":{"kind":"app_task","name":"2be702b8_dag"},"variable_list":[]},"name":"post_action_delete"}],"type":"EXISTING_VM","name":"Era_Provisioned_DB","readiness_probe":{"connection_type":"POWERSHELL","retries":"5","connection_protocol":"http","connection_port":5985,"address":"@@{DB_SERVER_IP}@@","delay_secs":"60","disable_readiness_probe":true,"login_credential_local_reference":{"kind":"app_credential","name":"WindowsCredentials"}},"os_type":"Windows","create_spec":{"type":"PROVISION_EXISTING_MACHINE","address":"@@{DB_SERVER_IP}@@"},"variable_list":[]}],"credential_definition_list":[{"username":"administrator","description":"","type":"PASSWORD","secret":{"attrs":{"is_secret_modified":false,"secret_reference":{}}},"name":"db_server_creds","editables":{"secret":true}},{"username":"admin","description":"","type":"PASSWORD","secret":{"attrs":{"is_secret_modified":false,"secret_reference":{}}},"name":"era_creds"},{"username":"ntnxlab\\administrator","description":"","type":"PASSWORD","secret":{"attrs":{"is_secret_modified":false,"secret_reference":{}}},"name":"WindowsCredentials"},{"username":"centos","description":"","type":"KEY","secret":{"attrs":{"is_secret_modified":false,"secret_reference":{}}},"name":"CENTOS"}],"package_definition_list":[{"description":"","action_list":[],"type":"DEB","service_local_reference_list":[{"kind":"app_service","name":"DB_Provision"}],"name":"Package2","version":"","options":{"install_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Package2"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"58ca4a03_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"8b1f1a7b_runbook","main_task_local_reference":{"kind":"app_task","name":"58ca4a03_dag"},"variable_list":[]},"type":"","uninstall_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Package2"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"ee8bedbe_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"faacff5d_runbook","main_task_local_reference":{"kind":"app_task","name":"ee8bedbe_dag"},"variable_list":[]}},"variable_list":[]}],"app_profile_list":[{"deployment_create_list":[{"type":"GREENFIELD","action_list":[],"name":"f6be2786_deployment","min_replicas":"1","default_replicas":"1","depends_on_list":[],"published_service_local_reference_list":[],"max_replicas":"1","package_local_reference_list":[{"kind":"app_package","name":"Package2"}],"substrate_local_reference":{"kind":"app_substrate","name":"Era_Provisioned_DB"},"variable_list":[],"description":""}],"description":"","action_list":[{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"GetTimeMachine"},{"kind":"app_task","name":"Snapshot_DB"},{"kind":"app_task","name":"GetSnapshotID"}],"name":"59e95f22_dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"GetTimeMachine"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Snapshot_DB"}},{"from_task_reference":{"kind":"app_task","name":"Snapshot_DB"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"GetSnapshotID"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"DB_Provision"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"GetTimeMachine","attrs":{"exit_status":[],"script":"# Set creds and headers\nera_user = '@@{era_creds.username}@@'\nera_pass = '@@{era_creds.secret}@@'\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\n\n# Set Time Machine ID by doing a GET on the Database\nurl  = \"https:\/\/@@{era_ip}@@:8443\/era\/v0.9\/databases\/?value-type=name&value=@@{New_DB_Name}@@&detailed=true\"\nresp = urlreq(url, verb='GET', auth='BASIC', user=era_user, passwd=era_pass, headers=headers)\n\n# If the response is ok, set to our TM_ID variable\nif resp.ok:\n  print \"TM_ID={0}\".format(json.loads(resp.content)[0]['timeMachineId'])\n  \n  # If it is not, make a new call to get list of possible databases\nelse:\n  print \"Error: Database named '@@{New_DB_Name}@@' was not found.\"\n  print \"\"\n  print \"The valid database_name values on this Era server are:\"\n  print \"======================================================\"\n  \n  url  = \"https:\/\/@@{era_ip}@@:8443\/era\/v0.9\/databases\"\n  resp = urlreq(url, verb='GET', auth='BASIC', user=era_user, passwd=era_pass, headers=headers)\n  \n  for dbs in json.loads(resp.content):\n    if not dbs[0]['clone']:\n      print dbs[0]['name']\n  \n  print \"======================================================\"\n  print \"Please use one of the above databases, and try again.\"\n  exit(1)\n  \n  ","eval_variables":["TM_ID"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"DB_Provision"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Snapshot_DB","attrs":{"exit_status":[],"script":"# Set creds and headers\nera_user = '@@{era_creds.username}@@'\nera_pass = '@@{era_creds.secret}@@'\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\n\n# Create the Snapshot \n\n# Set the URL and Payload\n\nurl = \"https:\/\/@@{era_ip}@@:8443\/era\/v0.9\/tms\/@@{TM_ID}@@\/snapshots\"\n\npayload = {\n  \"name\": \"@@{DB_Snap_Name}@@\",\n  \"lcmConfig\": {\n    \"snapshotLCMConfig\": {\n      \"expiryDetails\": {\n        \"expiryDateTimezone\": \"America\/New_York\",\n        \"expireInDays\": @@{Days_To_Expiration}@@\n      }\n    }\n  }\n}\n\n# Make the Call and Monitor\n\nresp = urlreq(url, verb='POST', auth='BASIC', user=era_user, passwd=era_pass, params=json.dumps(payload), headers=headers)\nif resp.ok:\n  print \"SNAP_OPERATION_ID={0}\".format(json.loads(resp.content)['operationId'])\nelse:\n  print \"Post Database Snapshot request failed\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)\n","eval_variables":["SNAP_OPERATION_ID"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"DB_Provision"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"GetSnapshotID","attrs":{"exit_status":[],"script":"# Set creds and headers\nera_user = '@@{era_creds.username}@@'\nera_pass = '@@{era_creds.secret}@@'\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\n\nurl     = \"https:\/\/@@{era_ip}@@:8443\/era\/v0.9\/operations\/@@{SNAP_OPERATION_ID}@@\"\n\n# Monitor the operation\nfor x in range(20):\n  \n  print \"Sleeping for 60 seconds.\"\n  sleep(60)\n  resp = urlreq(url, verb='GET', auth='BASIC', user=era_user, passwd=era_pass, headers=headers)\n  print \"Percentage Complete: {0}\".format(json.loads(resp.content)['percentageComplete'])\n  \n  # If complete, break out of loop\n  if json.loads(resp.content)['percentageComplete'] == \"100\":\n    break\n\n# If the operation did not complete within 20 minutes, assume it's not successful and error out\nif json.loads(resp.content)['percentageComplete'] != \"100\":\n  print \"Get Operation ID timed out\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)\n\n# Get the Snapshot ID and set it to a variable\nprint \"SNAP_ID={0}\".format(json.loads(resp.content)['entityId'])\n","eval_variables":["SNAP_ID"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]}],"description":"","name":"f97a98ca_runbook","main_task_local_reference":{"kind":"app_task","name":"59e95f22_dag"},"variable_list":[{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":true,"description":"Enter number of days until the snapshot expires. Number between 1 and 31.","data_type":"BASE","type":"LOCAL","name":"Days_To_Expiration","value":"7","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"Name the Snapshot","data_type":"BASE","type":"LOCAL","name":"DB_Snap_Name","value":"","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}]},"name":"CreateSnapshot"},{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"GetSnaps"}],"name":"2e212650_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"DB_Provision"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"GetSnaps","attrs":{"script":"# Set creds and headers\nera_user = '@@{era_creds.username}@@'\nera_pass = '@@{era_creds.secret}@@'\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\n\n# Get Time Machine Capability\nurl  = \"https:\/\/@@{era_ip}@@:8443\/era\/v0.9\/tms\/@@{TM_ID}@@\/capability?summmary=false\"\nresp = urlreq(url, verb='GET', auth='BASIC', user=era_user, passwd=era_pass, headers=headers)\n\nif resp.ok:\n  \n  # Cycle through the snapshot modes\n  for modes in json.loads(resp.content)['capability']:\n    print \"{0} MODE\".format(modes['mode'])\n    \n    # Cycle through the snapshots if they exist\n    if modes['snapshots']:\n      for snapshot in modes['snapshots']:\n        print \"  ------------------------\"\n        print \"  Snapshot ID (copy this): {0}\".format(snapshot['id'])\n        print \"  Snapshot Name: {0}\".format(snapshot['name'])\n        print \"  Snapshot Time Stamp:     {0}\".format(snapshot['snapshotTimeStamp'])\n        \n    # Print message if the don't exist\n    else:\n      print \"  ------------------------\"\n      print \"  No {0} snapshots exist.\".format(modes['mode'].lower())\n\nelse:\n  print \"Get Time Machine Capability request failed\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"abacb51b_runbook","main_task_local_reference":{"kind":"app_task","name":"2e212650_dag"},"variable_list":[]},"name":"GetSnapshotList"},{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"SnapDelete"},{"kind":"app_task","name":"MonitorSnapDelete"}],"name":"bb12b140_dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"SnapDelete"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"MonitorSnapDelete"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"DB_Provision"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"SnapDelete","attrs":{"exit_status":[],"script":"# Set creds and headers\nera_user = '@@{era_creds.username}@@'\nera_pass = '@@{era_creds.secret}@@'\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\n\n# Create the Snapshot \n\n# Set the URL and Payload\n\nurl = \"https:\/\/@@{era_ip}@@:8443\/era\/v0.9\/snapshots\/@@{Snapshot_ID_to_Delete}@@\"\n\n\n# Make the Call and Monitor\n\nresp = urlreq(url, verb='DELETE', auth='BASIC', user=era_user, passwd=era_pass, headers=headers)\nif resp.ok:\n  print \"SNAPDEL_OPERATION_ID={0}\".format(json.loads(resp.content)['operationId'])\nelse:\n  print \" Database Snapshot removal failed\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)\n\n\n","eval_variables":["SNAPDEL_OPERATION_ID"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"DB_Provision"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"MonitorSnapDelete","attrs":{"script":"# Set creds and headers\nera_user = '@@{era_creds.username}@@'\nera_pass = '@@{era_creds.secret}@@'\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\n\n# Monitor the operation\nurl     = \"https:\/\/@@{era_ip}@@:8443\/era\/v0.9\/operations\/@@{SNAPDEL_OPERATION_ID}@@\"\n\n# Monitor the operation\nfor x in range(20):\n  \n  print \"Sleeping for 30 seconds.\"\n  sleep(30)\n  resp = urlreq(url, verb='GET', auth='BASIC', user=era_user, passwd=era_pass, headers=headers)\n  print \"Percentage Complete: {0}\".format(json.loads(resp.content)['percentageComplete'])\n  \n  # If complete, break out of loop\n  if json.loads(resp.content)['percentageComplete'] == \"100\":\n    break\n\n# If the operation did not complete within 20 minutes, assume it's not successful and error out\nif json.loads(resp.content)['percentageComplete'] != \"100\":\n  print \"Snapshot Removal Failed\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"09162996_runbook","main_task_local_reference":{"kind":"app_task","name":"bb12b140_dag"},"variable_list":[{"val_type":"STRING","is_mandatory":true,"description":"Enter the Snapshot ID copied from \"GetSnapshotList\" action","data_type":"BASE","type":"LOCAL","name":"Snapshot_ID_to_Delete","value":"","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}]},"name":"DeleteSnapshot"}],"name":"Default","variable_list":[{"val_type":"STRING","is_mandatory":false,"description":"Using v1.0 of the base SQL for now.  Can add logic to determine available profiles and make selection later.","data_type":"BASE","type":"LOCAL","name":"Software_Profile","value":"MS_SQL_Base_SW_Profile","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"Using default name for now.  Can update and allow selection of actual Network Profiles that exist on Era in the future.","data_type":"BASE","type":"LOCAL","name":"Network_Profile","value":"DEFAULT_OOB_SQLSERVER_NETWORK","label":"Choose the network to use","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"Defaulting to sql for Microsoft SQL.  Can change and allow creation of different database engines.","data_type":"BASE","type":"LOCAL","name":"New_DB_Type","value":"sqlserver","label":"Choose the database engine","attrs":{"type":"LOCAL"},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":["sqlserver","oracle","postgres","mariadb","mysql"]}},{"val_type":"STRING","is_mandatory":false,"description":"Default SQLServer database parameter profile shipped out of the box by Era to be applied on the SQL Server Database.\nChange this Value or set at runtime to allow user to select custom parameter profiles that you may have setup.  For now this is marked as a secret and will use the default values.","data_type":"BASE","type":"LOCAL","name":"DB_Parameter_Profile","value":"DEFAULT_SQLSERVER_DATABASE_PARAMS","label":"DEFAULT_SQLSERVER_DATABASE_PARAMS","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"SECRET","name":"new_db_password","value":"","label":"","attrs":{"is_secret_modified":false,"secret_reference":{},"type":""},"editables":{"value":true},"is_hidden":false},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"era_ip","value":"10.42.157.22","label":"IP Address of the Era Server","attrs":{"type":""},"editables":{"value":true},"is_hidden":false},{"regex":{"should_validate":false,"value":"^.*$"},"val_type":"STRING","is_mandatory":true,"description":"Choose a production, development, or test environment.  Assumption is that DB Server VMs with prefix name MSSQL exist.","data_type":"BASE","type":"LOCAL","name":"New_DB_Environment","value":"Test","label":"Choose the MSSQL Server Environment","attrs":{"type":"LOCAL"},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":["Prod","Dev","Test"]}},{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"New_DB_Size","value":"","label":"Database Size in GB","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"Alter this to allow for your own SLA names.  Can change to simple string and allow freeform input.  The script will check for valid SLA names and display them.","data_type":"BASE","type":"LOCAL","name":"New_DB_SLA","value":"POC157_SLA","label":"","attrs":{"type":"LOCAL"},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":["None","POC157_SLA"]}},{"val_type":"STRING","is_mandatory":true,"description":"Name of your new database.  Remember to follow MS rules for name length and allowed characters.","data_type":"BASE","type":"LOCAL","name":"New_DB_Name","value":"","label":"Enter a New Database Name","editables":{"value":true},"is_hidden":false},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"Compute_Profile","value":"Small_DB_Compute","label":"","attrs":{"type":"LOCAL"},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":["Small_DB_Compute","Medium_DB_Compute","Large_DB_Compute"]}}]}],"published_service_definition_list":[],"default_credential_local_reference":{"kind":"app_credential","name":"era_creds"},"type":"USER"},"name":"Calm_Era_MSSQL_Deploy"},"api_version":"3.0","metadata":{"last_update_time":"1610400976923414","kind":"blueprint","spec_version":0,"creation_time":"1610400976923414","name":"Calm_Era_MSSQL_Deploy"}}